// 1) Your post data array
const posts = [
  {
    id: 1,
    title: "–ü–µ—Ä–≤—ã–π –¥–∏–∞–ª–æ–≥!üí¨",
    description: "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–≤—ã–π –¥–∏–∞–ª–æ–≥, –∫—Å—Ç–∞—Ç–∏, —Ç–æ–∂–µ 14 —á–∏—Å–ª–∞ :)",
    imageUrl: "images/01.jpeg",
    timestamp: "2024-07-14T14:34:00", // ISO format
  },
  {
    id: 2,
    title: '"–ü—Ä–∏–≤–µ—Ç!üëã"',
    description: ' –ù–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π "–ü—Ä–∏–≤–µ—Ç!"',
    imageUrl: "images/02.jpeg",
    timestamp: "2024-08-21T16:00:00",
  },
  {
    id: 3,
    title: "–ú–∞—Ñ–∏—èüïµÔ∏è‚Äç‚ôÇÔ∏è",
    description: "–ü–µ—Ä–≤—ã–µ —Å–±–æ—Ä—ã –∏ –∏–≥—Ä—ã)",
    imageUrl: "images/03.jpg",
    timestamp: "2024-08-24T22:00:00",
  },
  {
    id: 4,
    title: "–ö–æ—Ä–Ω–∏–∏—àüåÜ",
    description:
      "–û–¥–Ω–æ –∏–∑ –ø–µ—Ä–≤—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ö—Å—Ç–∞—Ç–∏, –ê—Å—Ç–∞–Ω–∞ –∏–ª–∏ –ê–±—É –î–∞–±–∏?)",
    imageUrl: "images/04.jpeg",
    timestamp: "2024-09-20T21:20:13",
  },
  {
    id: 5,
    title: "–ü–µ—Ä–≤—ã–π –°—Ç–∞–¥–∏ –†—É–ºüìö",
    description:
      "–í —Ç–æ—Ç –¥–µ–Ω—å –º—ã –≤–ø–µ—Ä–≤—ã–µ —Å–µ–ª–∏ –≤–º–µ—Å—Ç–µ –≤ —Å—Ç–∞–¥–∏ —Ä—É–º –ø–æ—Å–ª–µ –≥–ª–æ–±–∞–ª –µ–¥—É–∫–µ–π—à–Ω–∞",
    imageUrl: "images/05.jpg",
    timestamp: "2024-09-26T15:34:43",
  },
  {
    id: 6,
    title: "–î—É–±–∞–π –¢—Ä–∏–ø",
    description: "–ö–∞–∫–æ–π –∂–µ –∫–ª–∞—Å—Å–Ω—ã–π —Ç—Ä–∏–ø: –ì–ª–æ–±–∞–ª –í–∏–ª–ª–∞–¥–∂, –ú–∞–¥–∏–Ω–∞—Ç –∏ –Ø—Ö—Ç–∞üõ•Ô∏è",
    imageUrl: "images/06.jpeg",
    timestamp: "2024-10-16T11:11:42",
  },
  {
    id: 7,
    title: "–†–æ–æ–Ωüêà",
    description: "–í —Ç–æ—Ç –¥–µ–Ω—å –º—ã –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ —Ä–æ–Ω–∞ –Ω–∞ —Å–ø–æ—Ç–µ",
    imageUrl: "images/07.jpeg",
    timestamp: "2024-11-07T23:20:00",
  },
  {
    id: 8,
    title: "–†–∞—Å—Å–≤–µ—Ç –Ω–∞ –≤–µ–ª–∏–∫–∞—ÖüåÖ",
    description: "–≠—Ç–æ—Ç —Ö–∞–π–ª–∞–π—Ç —è –Ω–∏–∫–æ–≥–¥–∞–∞ –Ω–µ –∑–∞–±—É–¥—É))",
    imageUrl: "images/08.jpeg",
    timestamp: "2024-11-11T06:00:30",
  },
  {
    id: 9,
    title: "–ê—Ä—Ç –≤—ã—Å—Ç–∞–≤–∫–∞üèõÔ∏è",
    description:
      "–ö–∞–∫ –∂–µ –º—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞ –ø–µ—Ä–≤—ã—Ö —Å–µ–∫—Ü–∏—è—Ö —á—Ç–æ–± –ø–æ—Ç–æ–º –ø–µ—Ä–µ–±–µ–∂–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞ –ø–æ–ª—á–∞—Å–∞.",
    imageUrl: "images/09.jpeg",
    timestamp: "2024-11-24T19:49:32",
  },
  {
    id: 10.5,
    title: "UAE dayüá¶üá™",
    description: "–¢–æ–∂–µ –æ—á–µ–µ–Ω—å –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è –¥–µ–Ω—å, –æ—Å–æ–±–µ–Ω–Ω–æ —Å–∞–ª—é—Çü§©ü§©",
    imageUrl: "images/10.5.jpeg",
    timestamp: "2024-12-02T21:14:42",
  },
  {
    id: 13,
    title: "–í—Ç–æ—Ä–æ–π —Å–µ–º–µ—Å—Ç—Äüéì",
    description:
      "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—É–¥—É —Å–ª–æ–≤–∞ –ù–∏–∫–æ–ª–µ—Ç—ã, '–¥—É–º–∞–µ—à—å –æ–Ω–∞ –ø–æ–π–º–µ—Ç –æ—Ç –∫–æ–≥–æ —Ü–≤–µ—Ç—ã?)'",
    imageUrl: "images/13.jpg",
    timestamp: "2025-01-20T16:44:12",
  },
  {
    id: 13,
    title: "–ü–µ—Ä–≤—ã–π Boozajiüç®",
    description: "–û—Ç–ø—Ä–∞–∑–¥–Ω–æ–≤–∞–ª–∏ –Ω–∞—á–∞–ª–æ –≤—Ç–æ—Ä–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞)'",
    imageUrl: "images/13.jpg",
    timestamp: "2025-01-21T21:00:12",
  },
  {
    id: 15,
    title: "–ü–µ—Ä–≤—ã–π —Ç—Ä–∏–∏–øüå¥",
    description:
      "–ü–µ—Ä–≤—ã–π —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π —Ç—Ä–∏–ø!! –ò, –∫—Å—Ç–∞—Ç–∏, –ø–µ—Ä–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ñ–æ—Ç–∫–∞)'",
    imageUrl: "images/15.jpeg",
    timestamp: "2025-01-25T16:24:48",
  },
  {
    id: 16,
    title: "–¢–≤–æ–µ –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏–µüéâ",
    description:
      "–í—Å–µ –µ—â–µ –ø–æ–º–Ω—é –∫–∞–∫ —è —á—É—Ç—å-—á—É—Ç—å –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–ª —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏ –º—ã –æ–ø–æ–∑–¥–∞–ª–∏, –∫–∞–∫ –º—ã –ø–æ–µ–ª–∏ —á–∏–∑–∫–µ–π–∫ –∏ –∫–∞–∫ –≥—É–ª—è–ª–∏ –≤–æ–∑–ª–µ —Ç—Ä–µ—Ö –±–∞—à–µ–Ω)",
    imageUrl: "images/16.jpg",
    timestamp: "2025-02-11T00:00:00",
  },
  {
    id: 16.5,
    title: "SeaWorldüê¨",
    description:
      "–ö—Ç–æ-—Ç–æ –æ—á–µ–µ–Ω—å –¥–∞–≤–Ω–æ–æ —Ö–æ—Ç–µ–ª —Ç—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å) –ü–æ—Ç—Ä–æ–≥–∞—Ç—å —Å–∫–∞—Ç–∞ –∏ —É–≤–∏–¥–µ—Ç—å –¥–µ–ª—å—Ñ–∏–Ω–æ–≤‚úÖ",
    imageUrl: "images/16.5.jpeg",
    timestamp: "2025-03-23T14:16:33",
  },
  {
    id: 17,
    title: "Seoul Tower ‚ù§Ô∏èüîí",
    description:
      "–ú–æ–π —Å–∞–º—ã–π –ª—é–±–∏–º—ã–π –¥–µ–Ω—å –∑–∞ –≤—Ç–æ—Ä–æ–π —Å–µ–º–µ—Å—Ç—Ä: –ô–æ–Ω—Å–µ–π, –†–æ–ª–ª–∏–Ω–≥ –ü–∞—Å—Ç–∞, –°—Ç–∞—Ä—Ñ–∏–ª–¥, –ì–∞–Ω–Ω–∞–º –°—Ç–∞–π–ª –∏ –°–µ—É–ª –¢–∞—É—ç—Äü§©",
    imageUrl: "images/17.jpeg",
    timestamp: "2025-03-31T23:11:00",
  },
  {
    id: 18,
    title: "–ü—É—Å–∞–Ωü¶ä",
    description:
      "–¢–æ–∂–µ –æ—á–µ–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –¥–µ–Ω—å) –°—Ç–æ—è–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞ —Ñ–æ–Ω–æ–º –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –ø—Ä–∏–Ω—Ü–∞, –≥—É–ª—è–ª–∏ –ø–æ –±–∏—Ñ—Ñ—É, –∞ –∑–∞—Ç–µ–º —É–≤–∏–¥–µ–ª–∏ –∫–∞–∏—Å—Çü§©",
    imageUrl: "images/18.jpg",
    timestamp: "2025-04-02T08:30:11",
  },
  {
    id: 19,
    title: "–î—ç–π—Ç —É –•–∞–Ω –†–∏–≤–µ—Ä–∞üåâ",
    description: "–ö—Ä–∞–π–Ω–∏–π –¥–µ–Ω—å –≤ –ö–æ—Ä–µ–µ —Ç–æ–∂–µ –±—ã–ª –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º)",
    imageUrl: "images/19.jpeg",
    timestamp: "2025-04-04T19:34:15",
  },
  {
    id: 20,
    title: "–ü–µ—Ä–≤—ã–π –ö–æ–Ω—Ü–µ—Ä—Çüé§üé∏",
    description:
      "Perfect, Shape of you, Apologise & Counting Starsüîù (P/S: –Ω—É –∏ –ê–ª–∞–±–∞–π —Ç–æ–∂–µ)",
    imageUrl: "images/20.jpg",
    timestamp: "2025-04-26T23:16:38",
  },
  {
    id: 21,
    title: "–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –≤—Ç–æ—Ä–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ :(",
    description:
      "–ö–∞–∫ –∂–µ –º–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞: –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, –ú–∏—Å–∫ –∏ –ê–Ω—Ç–æ–Ω–∏–æ, –∏ –¥–≤–∞ —Ü–µ–ª—ã—Ö –¥–Ω—è —Å —Ç–æ–±–æ–π - —Å–∞–º—ã–π –ª—É—á—à–∏–π –¥–∏—Å—Ç—Ä—ç—Å—Å–µ—Ä –ø–æ—Å–ª–µ —Ñ–∞–π–Ω–∞–ª–æ–≤",
    imageUrl: "images/21.jpg",
    timestamp: "2025-05-17T18:00:00",
  },
  {
    id: 22,
    title: "–ê—Å—Ç–∞–Ω–∞üá∞üáø",
    description:
      "–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π, –≠–∫—Å–ø–æ, –•–∞–Ω –®–∞—Ç—ã—Ä –∏ –ö–æ–ª–µ—Å–æ –û–±–æ–∑—Ä–µ–Ω–∏—è, –ø–µ—Ä–≤—ã–π –¥–æ–∂–¥—å –∏ –µ—â–µ —Å—Ç–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –Ω–∞—Å –∂–¥–µ—Ç –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ 2 –º–µ—Å—è—Ü–∞.... ",
    imageUrl: "images/23.jpg",
    timestamp: "2025-06-01T21:00:00",
  },
  {
    id: 23,
    title: "üá∞üáø–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω-–ú–∞–∫–µ–¥–æ–Ω–∏—è",
    description: "–ù–∞—à –ü–µ—Ä–≤—ã–π –§—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á :)",
    imageUrl: "images/match.jpg",
    timestamp: "2025-06-01T21:00:00",
  },
];

// 2) Utility to compute "ago"
function getRelativeTime(ts) {
  const now = new Date();
  const then = new Date(ts);
  let delta = Math.floor((now - then) / 1000); // total seconds

  const days = Math.floor(delta / 86400);
  delta %= 86400;
  const hours = Math.floor(delta / 3600);
  delta %= 3600;
  const minutes = Math.floor(delta / 60);
  const seconds = delta % 60;

  const parts = [];
  if (days) parts.push(`${days} –¥–Ω–µ–π`);
  if (hours) parts.push(`${hours} —á–∞—Å–æ–≤`);
  if (minutes) parts.push(`${minutes} –º–∏–Ω—É—Ç`);
  parts.push(`${seconds} —Å–µ–∫—É–Ω–¥`);

  return parts.join(" ");
}

// 3) Render posts and start interval
function renderPosts() {
  const container = document.getElementById("posts-container");
  container.innerHTML = "";

  posts.forEach((post) => {
    const card = document.createElement("div");
    card.className = "post";
    card.innerHTML = `
        <div class="post-image">
          <img src="${post.imageUrl}" alt="${post.title}">
        </div>
        <div class="post-details">
          <div class="relative-time" data-ts="${post.timestamp}"></div>
          <h2 class="post-title">${post.title}</h2>
          <p class="description">${post.description}</p>

        </div>
      `;
    container.appendChild(card);
  });
  const infinityCard = document.createElement("div");
  infinityCard.className = "post";
  infinityCard.innerHTML = `
    <div class="post-image">
      <img src="images/next.jpg" alt="Coming soon...">
    </div>
    <div class="post-details">
      <div class="relative-time infinite">‚àû</div>
      <h2 class="post-title">Coming soon...</h2>
      <p class="description">–ê—Ä—Ö–∏–≤ –±—É–¥–µ—Ç –µ—â–µ –¥–æ–ª–≥–æ –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è)</p>
    </div>
  `;
  container.appendChild(infinityCard);
  updateRelativeTimes();
}

function updateRelativeTimes() {
  document.querySelectorAll(".relative-time[data-ts]").forEach((el) => {
    const ts = el.getAttribute("data-ts");
    el.textContent = getRelativeTime(ts) + " –Ω–∞–∑–∞–¥ –±—ã–ª...";
  });
}
// 1) Define your playlist:
const tracks = [
  {
    title: "Every breath you take",
    artist: "The Police",
    src: "music/everybreath.mp3",
    cover: "music/everybreath.jpeg",
  },
  {
    title: "I just called to say",
    artist: "Stevie Wonder",
    src: "music/Ijustcalled.mp3",
    cover: "music/Ijustcalled.jpg",
  },
  {
    title: "Thinking out Loud",
    artist: "Ed Sheeran",
    src: "music/thinking.mp3",
    cover: "music/thinking.jpeg",
  },
  {
    title: "Sunday Morning",
    artist: "Maroon 5",
    src: "music/sunday.mp3",
    cover: "music/sunday.jpeg",
  },
  {
    title: "–í–∞—Ö—Ç–µ—Ä–∞–º",
    artist: "–ë—É–º–±–æ–∫—Å",
    src: "music/vahteram.mp3",
    cover: "music/vahteram.jpg",
  },
  {
    title: "Perfect",
    artist: "Ed Sheeran",
    src: "music/perfect.mp3",
    cover: "music/perfect.jpeg",
  },
];

let current = 0;
const audio = document.getElementById("audio");
const cover = document.getElementById("cover");
const title = document.getElementById("track-title");
const artist = document.getElementById("track-artist");
const progress = document.getElementById("progress");
const currentTimeEl = document.getElementById("current-time");
const durationEl = document.getElementById("duration");
const btnToggle = document.getElementById("toggle");
const btnNext = document.getElementById("next");

// 2) Load a track by index
function loadTrack(i) {
  const t = tracks[i];
  audio.src = t.src;
  cover.src = t.cover;
  title.textContent = t.title;
  artist.textContent = t.artist;
  audio.load();
  audio.addEventListener("loadedmetadata", () => {
    const d = audio.duration;
    durationEl.textContent = formatTime(d);
  });
}

// 3) Format seconds ‚Üí M:SS
function formatTime(sec) {
  const m = Math.floor(sec / 60);
  const s = Math.floor(sec % 60)
    .toString()
    .padStart(2, "0");
  return `${m}:${s}`;
}

// 4) Update progress bar & time
audio.addEventListener("timeupdate", () => {
  const pct = (audio.currentTime / audio.duration) * 100;
  progress.style.width = pct + "%";
  currentTimeEl.textContent = formatTime(audio.currentTime);
});

// 5) Play / Pause toggle
btnToggle.addEventListener("click", () => {
  if (audio.paused) {
    audio.play();
    btnToggle.textContent = "‚ùö‚ùö";
  } else {
    audio.pause();
    btnToggle.textContent = "‚ñ∂Ô∏é";
  }
});

// 6) Next track
btnNext.addEventListener("click", () => {
  current = (current + 1) % tracks.length;
  loadTrack(current);
  audio.play();
  btnToggle.textContent = "‚ùö‚ùö";
});

// 7) Kick things off
document.addEventListener("DOMContentLoaded", () => {
  loadTrack(current);

  // the autoplay attribute should trigger playback,
  // but let's also call play() in case:
  audio
    .play()
    .then(() => {
      btnToggle.textContent = "‚ùö‚ùö";
    })
    .catch((err) => {
      console.warn("Autoplay blocked by browser:", err);
    });

  // only init posts on the timeline page
  const container = document.getElementById("posts-container");
  if (container) {
    renderPosts();
    setInterval(updateRelativeTimes, 1000);
  }
});
// initial render
renderPosts();
// update every second
setInterval(updateRelativeTimes, 1000);
(function () {
  const container = document.getElementById("hearts-container");

  function createHeart() {
    const heart = document.createElement("div");
    heart.className = "heart";
    heart.textContent = "‚ù§Ô∏è";

    // random horizontal start
    heart.style.left = Math.random() * 100 + "vw";

    // random size between 12px‚Äì32px
    const size = Math.random() * 20 + 12;
    heart.style.fontSize = size + "px";

    // random fall duration between 3‚Äì6 seconds
    heart.style.animationDuration = Math.random() * 3 + 25 + "s";

    container.appendChild(heart);

    // remove from DOM once the animation is over
    setTimeout(
      () => container.removeChild(heart),
      parseFloat(heart.style.animationDuration) * 1000
    );
  }

  // spawn a new heart every 200ms (adjust rate to taste)
  setInterval(createHeart, 3500);
})();
